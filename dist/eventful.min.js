"use strict";function _toConsumableArray(e){return _arrayWithoutHoles(e)||_iterableToArray(e)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}function _iterableToArray(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}function _arrayWithoutHoles(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}var eventfulCollectionPropertyDescriptors={definedByEventfulCollectionPropertyDescriptors:{value:!0},eventfulCollectionData:{writable:!0},adjustEventfulCollection:{value:function(e){for(var t=this;e!==this.length;)e<this.length?function(){var r=String(e);Object.defineProperty(t,r,{configurable:!0,enumerable:!0,set:function(e){if(this.eventfulCollectionData[r]!==e){var t=this.eventfulCollectionData[r];this.eventfulCollectionData[r]=e,this.definedByEventfulEmitterPropertyDescriptors&&e!==t&&(this.trigger("change",r,e,t),this.trigger("change:".concat(r),e,t))}},get:function(){return this.eventfulCollectionData[r]}}),e++}():(delete this[String(e-1)],e--)}},length:{get:function(){return this.eventfulCollectionData?this.eventfulCollectionData.length:0}},toArray:{value:function(){if(!this.eventfulCollectionData)return[];var r=this.eventfulCollectionData.slice();return r.forEach(function(e,t){e.definedByEventfulDictionaryPropertyDescriptors?r[t]=e.toJSON():e.definedByEventfulCollectionPropertyDescriptors&&(r[t]=e.toArray())}),r}}};function eventfulCollection(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:[];return Array.isArray(e)&&(t=e,e={}),(e=eventful(e)).definedByEventfulCollectionPropertyDescriptors||(e=Object.defineProperties(e,eventfulCollectionPropertyDescriptors)),e.push.apply(e,_toConsumableArray(t)),e}["copyWithin","fill","pop","push","reverse","shift","sort","splice","unshift"].forEach(function(a){eventfulCollectionPropertyDescriptors[a]={value:function(){for(var e,t=this.length,r=arguments.length,n=new Array(r),i=0;i<r;i++)n[i]=arguments[i];var o=(e=Array.prototype[a]).call.apply(e,[this.eventfulCollectionData].concat(n));return this.adjustEventfulCollection(t),this.definedByEventfulEmitterPropertyDescriptors&&this.trigger("change"),o}}}),["concat","includes","indexOf","join","lastIndexOf","slice","toSource","toString","toLocaleString","entries","every","filter","find","findIndex","forEach","keys","map","reduce","reduceRight","some","values"].forEach(function(i){eventfulCollectionPropertyDescriptors[i]={value:function(){for(var e,t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return(e=Array.prototype[i]).call.apply(e,[this.eventfulCollectionData].concat(r))}}});var eventfulDictionaryPropertyDescriptors={definedByEventfulDictionaryPropertyDescriptors:{value:!0},eventfulDictionaryData:{writable:!0},observeProperty:{value:function(n,e,t){var r=1<arguments.length&&void 0!==e?e:this[n],i=2<arguments.length&&void 0!==t?t:{},o=i.setter,a=void 0===o?function(e,t){return t()}:o,l=i.getter,s=void 0===l?function(e){return e()}:l;this.eventfulDictionaryData||(this.eventfulDictionaryData={});var f=Object.getOwnPropertyDescriptor(this,n);return f&&(f.get||f.set)||(void 0!==r&&(this.eventfulDictionaryData[n]=r),delete this[n],Object.defineProperty(this,n,{configurable:!0,enumerable:!0,set:function(e){var t=this;if(this.eventfulDictionaryData[n]!==e){var r=this.eventfulDictionaryData[n];a.call(this,e,function(){t.eventfulDictionaryData[n]=e,t.definedByEventfulEmitterPropertyDescriptors&&e!==r&&(t.trigger("change",n,e,r),t.trigger("change:".concat(n),e,r))})}},get:function(){var e=this;return s.call(this,function(){return e.eventfulDictionaryData[n]})}})),this}},unobserveProperty:{value:function(e){if(this.eventfulDictionaryData)return this;var t=Object.getOwnPropertyDescriptor(this,e);if(t&&(t.get||t.set)){var r=this.eventfulDictionaryData[e];delete this.eventfulDictionaryData[e],delete this[e],void 0!==r&&(this[e]=r)}return this}},toJSON:{value:function(){var e=Object.assign({},this.eventfulDictionaryData);for(var t in e)e[t].definedByEventfulDictionaryPropertyDescriptors?e[t]=e[t].toJSON():e[t].definedByEventfulCollectionPropertyDescriptors&&(e[t]=e[t].toArray());return e}}};function eventfulDictionary(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{};return(t=eventful(t)).definedByEventfulDictionaryPropertyDescriptors||(t=Object.defineProperties(t,eventfulDictionaryPropertyDescriptors)),Object.keys(t).forEach(function(e){t.observeProperty(e)}),t}var eventfulDomPropertyDescriptors={definedByEventfulDomPropertyDescriptors:{value:!0},eventfulDomData:{writable:!0},on:{value:function(n,i,o,a,e){var l=this,t=(4<arguments.length&&void 0!==e?e:{}).fromObserver,r=void 0!==t&&t;this.eventfulDomData||(this.eventfulDomData={});function s(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];i.call.apply(i,[l].concat(t)),o&&l.off(n,i,o,a)}return this.addEventListener(name,s),this.eventfulDomData.push({event:n,handler:i,once:o,observer:a,listener:s}),this.definedByEventfulEmitterPropertyDescriptors?eventfulEmitterPropertyDescriptors.on.value.call(this,n,i,o,a,{fromObserver:r}):this}},off:{value:function(e,t,r,n,i){var o=(4<arguments.length&&void 0!==i?i:{}).fromObserver,a=void 0!==o&&o;if(this.eventfulDomData)return this;for(var l=0;l<this.eventfulDomData.length;){var s=this.eventfulDomData[l],f=s.event,v=s.handler,u=s.once,c=s.observer,h=s.listener;e&&e!==f||t&&t!==v||null!=r&&r!==u||n&&n!==c?l++:(this.eventfulDomData.splice(l,1),this.removeEventListener(name,h))}return this.definedByEventfulEmitterPropertyDescriptors?eventfulEmitterPropertyDescriptors.off.value.call(this,e,t,r,n,{fromObserver:a}):this}}};function eventfulDom(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{};return(e=eventful(e)).definedByEventfulDomPropertyDescriptors||(e=Object.defineProperties(e,eventfulDomPropertyDescriptors)),e}var eventfulEmitterPropertyDescriptors={definedByEventfulEmitterPropertyDescriptors:{value:!0},eventfulEmitterEnabled:{writable:!0,value:!0},eventfulEmitterData:{writable:!0},on:{value:function(e,t,r,n,i){var o=(4<arguments.length&&void 0!==i?i:{}).fromObserver,a=void 0!==o&&o;return this.eventfulEmitterData||(this.eventfulEmitterData=[]),this.eventfulEmitterData.push({event:e,handler:t,once:r,observer:n}),!a&&n&&n.listenTo(this,e,t,r,{fromEmitter:!0}),this}},off:{value:function(t,r,n,e,i){var o=this,a=(4<arguments.length&&void 0!==i?i:{}).fromObserver,l=void 0!==a&&a;if(!this.eventfulEmitterData)return this;for(var s=[],f=0;f<this.eventfulEmitterData.length;){var v=this.eventfulEmitterData[f],u=v.event,c=v.handler,h=v.once,p=v.observer;t&&t!==u||r&&r!==c||null!=n&&n!==h||e&&e!==p?f++:(this.eventfulEmitterData.splice(f,1),p&&-1===s.indexOf(p)&&s.push(p))}return l||s.forEach(function(e){e.stopListening(o,t,r,n,{fromEmitter:!0})}),this}},trigger:{value:function(o){for(var a=this,e=arguments.length,l=new Array(1<e?e-1:0),t=1;t<e;t++)l[t-1]=arguments[t];return this.eventfulEmitterData&&this.eventfulEmitterEnabled&&(this.eventfulEmitterData.forEach(function(e){var t=e.event,r=e.handler,n=e.observer;if(o===t){var i=n||a;r.call.apply(r,[i].concat(l))}}),this.off(o,null,!0)),this}}};function eventfulEmitter(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{};return e.definedByEventfulEmitterPropertyDescriptors||(e=Object.defineProperties(e,eventfulEmitterPropertyDescriptors)),e}function eventful(e){return eventfulObserver(eventfulEmitter(e))}var eventfulObserverPropertyDescriptors={definedByEventfulObserverPropertyDescriptors:{value:!0},eventfulObserverData:{writable:!0},listenTo:{value:function(e,t,r,n,i){var o=(4<arguments.length&&void 0!==i?i:{}).fromEmitter;return!(void 0!==o&&o)&&e&&e.on(t,r,n,this,{fromObserver:!0}),this.eventfulObserverData||(this.eventfulObserverData=[]),this.eventfulObserverData.push({emitter:e,event:t,handler:r,once:n}),this}},stopListening:{value:function(e,t,r,n,i){var o=this,a=(4<arguments.length&&void 0!==i?i:{}).fromEmitter,l=void 0!==a&&a;if(!this.eventfulObserverData)return this;for(var s=[],f=0;f<this.eventfulObserverData.length;){var v=this.eventfulObserverData[f],u=v.emitter,c=v.event,h=v.handler,p=v.once;e&&e!==u||t&&t!==c||r&&r!==h||null!=n&&n!==p?f++:(this.eventfulObserverData.splice(f,1),u&&-1===s.indexOf(u)&&s.push(u))}return l||s.forEach(function(e){e.off(t,r,n,o,{fromEmitter:!0})}),this}}};function eventfulObserver(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{};return e.definedByEventfulObserverPropertyDescriptors||(e=Object.defineProperties(e,eventfulObserverPropertyDescriptors)),e}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
